title <- sanitizar_nome(tracks$titulo[i])
output_file <- file.path(output_folder, glue("{sprintf('%02d', i)} - {title}.mp3"))
# Configurar argumentos do ffmpeg
ffmpeg_args <- c("-i", input_file, "-ss", start_time)
if (!is.na(end_time)) {
ffmpeg_args <- c(ffmpeg_args, "-to", end_time)
}
ffmpeg_args <- c(ffmpeg_args, "-c:a", "libmp3lame", output_file)
cat(glue("Extraindo faixa: {title}...\n"))
tryCatch({
processx::run(ffmpeg, ffmpeg_args, echo = TRUE)
cat(glue("Faixa '{title}' salva em: {output_file}\n"))
}, error = function(e) {
cat(glue("Erro ao extrair a faixa '{title}':\n"), e$message, "\n")
})
}
}
# URL do vídeo (substitua pelo link do YouTube ou Vimeo)
video_url <- "https://www.youtube.com/live/Wj3fYYFGRcY?list=RDWj3fYYFGRcY"
# Caminhos para yt-dlp e ffmpeg (presume que estão no PATH do sistema)
yt_dlp <- "yt-dlp"
ffmpeg <- "ffmpeg"
# Detectar plataforma
plataforma <- detectar_plataforma(video_url)
cat(glue("Plataforma detectada: {plataforma}\n"))
# Obter o título do vídeo para usar como nome da pasta
titulo_video <- obter_titulo_video(yt_dlp, video_url)
# Criando o dataframe com os dados das faixas
tracks_data <- data.frame(
inicio = c(
"09:45", "10:24", "10:52", "20:04",
"21:15", "25:20", "29:22", "33:46",
"37:48", "38:22", "41:26", "42:31",
"48:08", "53:05", "56:19", "01:01:12",
"01:02:50", "01:07:12", "01:10:02",
"1:14:40", "1:16:45", "1:20:46"
),
titulo = c(
"Abertura", "A Casa É Sua", "Não Vou Me Adaptar",
"Conversa", "Lágrimas do Mar", "Socorro",
"Alta Noite", "Passe Em Casa", "Conversa",
"O Pulso", "Conversa", "Contato Imediato",
"Vilarejo", "Saiba", "Velho Infância",
"Conversa", "Envelhecer", "Conversa",
"Comida", "Despedida", "Passa em Casa",
"Despedida"
)
)
tracks_data
# Carregar pacotes necessários
library(processx)
library(glue)
# Função para sanitizar nomes de arquivos/pastas
sanitizar_nome <- function(nome) {
gsub("[/\\:*?\"<>|]", "_", nome) # Substituir caracteres inválidos por "_"
}
# Função para detectar a plataforma (YouTube ou Vimeo)
detectar_plataforma <- function(video_url) {
if (grepl("youtube\\.com|youtu\\.be", video_url)) {
return("YouTube")
} else if (grepl("vimeo\\.com", video_url)) {
return("Vimeo")
} else {
stop("Plataforma não suportada.")
}
}
# Função para obter o título do vídeo
obter_titulo_video <- function(yt_dlp, video_url) {
tryCatch({
result <- processx::run(
yt_dlp,
c("--get-title", video_url),
echo = FALSE
)
titulo <- trimws(result$stdout)
titulo_sanitizado <- sanitizar_nome(titulo)
cat(glue("Título do vídeo: {titulo_sanitizado}\n"))
return(titulo_sanitizado)
}, error = function(e) {
cat("Erro ao obter o título do vídeo:\n", e$message, "\n")
stop("Não foi possível obter o título do vídeo.")
})
}
# Função para baixar o áudio completo
baixar_audio_completo <- function(yt_dlp, video_url, output_file) {
cat("Baixando o áudio completo...\n")
tryCatch({
processx::run(
yt_dlp,
c(
"--extract-audio",
"--audio-format", "mp3",
"--output", output_file,
video_url
),
echo = TRUE
)
cat(glue("Download concluído: {output_file}\n"))
}, error = function(e) {
cat("Erro durante o download do áudio:\n", e$message, "\n")
})
}
# Função para dividir o áudio em faixas
dividir_audio <- function(ffmpeg, input_file, tracks, output_folder) {
for (i in seq_along(tracks$titulo)) {
start_time <- tracks$inicio[i]
end_time <- ifelse(i < nrow(tracks), tracks$inicio[i + 1], NA) # Próximo início ou NA
title <- sanitizar_nome(tracks$titulo[i])
output_file <- file.path(output_folder, glue("{sprintf('%02d', i)} - {title}.mp3"))
# Configurar argumentos do ffmpeg
ffmpeg_args <- c("-i", input_file, "-ss", start_time)
if (!is.na(end_time)) {
ffmpeg_args <- c(ffmpeg_args, "-to", end_time)
}
ffmpeg_args <- c(ffmpeg_args, "-c:a", "libmp3lame", output_file)
cat(glue("Extraindo faixa: {title}...\n"))
tryCatch({
processx::run(ffmpeg, ffmpeg_args, echo = TRUE)
cat(glue("Faixa '{title}' salva em: {output_file}\n"))
}, error = function(e) {
cat(glue("Erro ao extrair a faixa '{title}':\n"), e$message, "\n")
})
}
}
# URL do vídeo (substitua pelo link do YouTube ou Vimeo)
video_url <- "https://www.youtube.com/live/Wj3fYYFGRcY"
# Caminhos para yt-dlp e ffmpeg (presume que estão no PATH do sistema)
yt_dlp <- "yt-dlp"
ffmpeg <- "ffmpeg"
# Detectar plataforma
plataforma <- detectar_plataforma(video_url)
cat(glue("Plataforma detectada: {plataforma}\n"))
# Obter o título do vídeo para usar como nome da pasta
titulo_video <- obter_titulo_video(yt_dlp, video_url)
output_folder <- titulo_video
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
cat(glue("Pasta criada: {output_folder}\n"))
}
# Caminho para o arquivo de áudio completo
audio_completo <- file.path(output_folder, "audio_completo.mp3")
# Baixar o áudio completo
baixar_audio_completo(yt_dlp, video_url, audio_completo)
# Criando o dataframe com os dados das faixas
tracks_data <- data.frame(
inicio = c(
"09:45", "10:24", "10:52", "20:04",
"21:15", "25:20", "29:22", "33:46",
"37:48", "38:22", "41:26", "42:31",
"48:08", "53:05", "56:19", "01:01:12",
"01:02:50", "01:07:12", "01:10:02",
"1:14:40", "1:16:45", "1:20:46"
),
titulo = c(
"Abertura", "A Casa É Sua", "Não Vou Me Adaptar",
"Conversa", "Lágrimas do Mar", "Socorro",
"Alta Noite", "Passe Em Casa", "Conversa",
"O Pulso", "Conversa", "Contato Imediato",
"Vilarejo", "Saiba", "Velho Infância",
"Conversa", "Envelhecer", "Conversa",
"Comida", "Despedida", "Passa em Casa",
"Despedida"
)
)
# Visualizando o dataframe
print(tracks_data)
# Dividir o áudio em faixas
dividir_audio(ffmpeg, audio_completo, tracks_data, output_folder)
# Lista todos os arquivos na pasta que começam com 'audio_completo'
arquivos <- list.files(output_folder, pattern = "^audio_completo", full.names = TRUE)
# Remove os arquivos desnecessários
if (length(arquivos) > 0) {
file.remove(arquivos)
cat("Arquivos temporários removidos.\n")
} else {
cat("Nenhum arquivo temporário encontrado para remover.\n")
}
# Carregar pacotes necessários
library(processx)
library(glue)
# Função para sanitizar nomes de arquivos/pastas
sanitizar_nome <- function(nome) {
gsub("[/\\:*?\"<>|]", "_", nome) # Substituir caracteres inválidos por "_"
}
# Função para detectar se é playlist ou vídeo
detectar_tipo <- function(video_url) {
if (grepl("list=", video_url)) {
return("playlist")
} else {
return("video")
}
}
# Função para baixar áudios em MP3 de uma playlist ou vídeo
baixar_audios <- function(yt_dlp, video_url, output_folder) {
cat("Iniciando o download dos áudios...\n")
tryCatch({
processx::run(
yt_dlp,
c(
"--extract-audio",
"--audio-format", "mp3",
"--output", file.path(output_folder, "%(playlist_index)s - %(title)s.%(ext)s"),
video_url
),
echo = TRUE
)
cat("Download de áudios concluído.\n")
}, error = function(e) {
cat("Erro durante o download:\n", e$message, "\n")
})
}
# Caminhos para yt-dlp (presume que está no PATH do sistema)
yt_dlp <- "yt-dlp"
# URL de vídeo ou playlist
video_url <- "https://www.youtube.com/playlist?list=PLlDg_wRHtbjJZjqdL4BGB2_ucwi9Bq7rq"
# Detectar tipo (playlist ou vídeo)
tipo <- detectar_tipo(video_url)
cat(glue("Tipo detectado: {tipo}\n"))
# Nome fixo para a pasta
output_folder <- "audios_playlist"
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
cat(glue("Pasta criada: {output_folder}\n"))
}
# Baixar os áudios
baixar_audios(yt_dlp, video_url, output_folder)
cat("Processo concluído. Os áudios foram salvos em:", output_folder, "\n")
install.packages("fs")
library(tidyverse)
library(fs)
library(magrittr)
# Definir o diretório onde os arquivos estão armazenados
audio_dir <- "C:/Users/tenorioabs/OneDrive/ciencia_de_dados/R/youtube_extrai_mp3/audios_playlist"
# Definir o tamanho máximo dos arquivos de saída (150 MB em bytes)
max_size <- 150 * 1024 * 1024
# Listar todos os arquivos na pasta (assumindo que são .mp3)
audio_files <- dir_ls(audio_dir, regexp = "\\.mp3$") %>%
file_info() %>%
arrange(path)  # Ordena os arquivos corretamente
# Criar a pasta de saída se não existir
output_dir <- file.path(audio_dir, "arquivos_combinados")
dir_create(output_dir)
# Função para obter o tamanho do arquivo
file_size_bytes <- function(file) {
file.info(file)$size
}
# Criar lotes de arquivos combinados respeitando o limite de 150 MB
current_batch <- list()
current_size <- 0
batch_index <- 1
for (file in audio_files$path) {
file_size <- file_size_bytes(file)
if (current_size + file_size > max_size) {
# Criar o arquivo combinado usando FFmpeg
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
writeLines(current_batch, "temp_list.txt")
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
# Resetar para o próximo lote
batch_index <- batch_index + 1
current_batch <- list()
current_size <- 0
}
# Adicionar o arquivo ao lote
current_batch <- append(current_batch, sprintf("file '%s'", file))
current_size <- current_size + file_size
}
library(tidyverse)
library(fs)
library(magrittr)
# Definir o diretório onde os arquivos estão armazenados
audio_dir <- "C:/Users/tenorioabs/OneDrive/ciencia_de_dados/R/youtube_extrai_mp3/audios_playlist"
# Definir o tamanho máximo dos arquivos de saída (150 MB em bytes)
max_size <- 150 * 1024 * 1024
# Listar todos os arquivos na pasta (assumindo que são .mp3)
audio_files <- dir_ls(audio_dir, regexp = "\\.mp3$") %>%
file_info() %>%
arrange(path)  # Ordena os arquivos corretamente
# Criar a pasta de saída se não existir
output_dir <- file.path(audio_dir, "arquivos_combinados")
dir_create(output_dir)
# Função para obter o tamanho do arquivo
file_size_bytes <- function(file) {
file.info(file)$size
}
# Criar lotes de arquivos combinados respeitando o limite de 150 MB
current_batch <- c()  # Alterado para vetor de caracteres
current_size <- 0
batch_index <- 1
for (file in audio_files$path) {
file_size <- file_size_bytes(file)
if (current_size + file_size > max_size) {
# Criar o arquivo combinado usando FFmpeg
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
# Criar arquivo temporário com a lista de arquivos
writeLines(current_batch, "temp_list.txt")
# Executar FFmpeg para juntar os arquivos
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
# Resetar para o próximo lote
batch_index <- batch_index + 1
current_batch <- c()  # Reinicia o vetor de caracteres
current_size <- 0
}
# Adicionar o arquivo ao lote
current_batch <- c(current_batch, sprintf("file '%s'", file))
current_size <- current_size + file_size
}
# Criar o último lote caso existam arquivos restantes
if (length(current_batch) > 0) {
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
writeLines(current_batch, "temp_list.txt")
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
}
# Remover arquivo temporário
file_delete("temp_list.txt")
cat("Processo concluído! Arquivos combinados foram salvos em:", output_dir, "\n")
library(tidyverse)
library(fs)
library(magrittr)
# Definir o diretório onde os arquivos estão armazenados
audio_dir <- "C:/Users/tenorioabs/OneDrive/ciencia_de_dados/R/youtube_extrai_mp3/audios_playlist"
# Definir o tamanho máximo dos arquivos de saída (150 MB em bytes)
max_size <- 50 * 1024 * 1024
# Listar todos os arquivos na pasta (assumindo que são .mp3)
audio_files <- dir_ls(audio_dir, regexp = "\\.mp3$") %>%
file_info() %>%
arrange(path)  # Ordena os arquivos corretamente
# Criar a pasta de saída se não existir
output_dir <- file.path(audio_dir, "arquivos_combinados")
dir_create(output_dir)
# Função para obter o tamanho do arquivo
file_size_bytes <- function(file) {
file.info(file)$size
}
# Criar lotes de arquivos combinados respeitando o limite de 150 MB
current_batch <- c()  # Alterado para vetor de caracteres
current_size <- 0
batch_index <- 1
for (file in audio_files$path) {
file_size <- file_size_bytes(file)
if (current_size + file_size > max_size) {
# Criar o arquivo combinado usando FFmpeg
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
# Criar arquivo temporário com a lista de arquivos
writeLines(current_batch, "temp_list.txt")
# Executar FFmpeg para juntar os arquivos
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
# Resetar para o próximo lote
batch_index <- batch_index + 1
current_batch <- c()  # Reinicia o vetor de caracteres
current_size <- 0
}
# Adicionar o arquivo ao lote
current_batch <- c(current_batch, sprintf("file '%s'", file))
current_size <- current_size + file_size
}
# Criar o último lote caso existam arquivos restantes
if (length(current_batch) > 0) {
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
writeLines(current_batch, "temp_list.txt")
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
}
# Remover arquivo temporário
file_delete("temp_list.txt")
cat("Processo concluído! Arquivos combinados foram salvos em:", output_dir, "\n")
# Carregar pacotes necessários
library(processx)
library(glue)
# Função para sanitizar nomes de arquivos/pastas
sanitizar_nome <- function(nome) {
gsub("[/\\:*?\"<>|]", "_", nome) # Substituir caracteres inválidos por "_"
}
# Função para detectar se é playlist ou vídeo
detectar_tipo <- function(video_url) {
if (grepl("list=", video_url)) {
return("playlist")
} else {
return("video")
}
}
# Função para baixar áudios em MP3 de uma playlist ou vídeo
baixar_audios <- function(yt_dlp, video_url, output_folder) {
cat("Iniciando o download dos áudios...\n")
tryCatch({
processx::run(
yt_dlp,
c(
"--extract-audio",
"--audio-format", "mp3",
"--output", file.path(output_folder, "%(playlist_index)s - %(title)s.%(ext)s"),
video_url
),
echo = TRUE
)
cat("Download de áudios concluído.\n")
}, error = function(e) {
cat("Erro durante o download:\n", e$message, "\n")
})
}
# Caminhos para yt-dlp (presume que está no PATH do sistema)
yt_dlp <- "yt-dlp"
# URL de vídeo ou playlist
video_url <- "https://www.youtube.com/playlist?list=PLfANFOkdeuaI8GHf-syrn6YlhdtDop3n5"
# Detectar tipo (playlist ou vídeo)
tipo <- detectar_tipo(video_url)
cat(glue("Tipo detectado: {tipo}\n"))
# Nome fixo para a pasta
output_folder <- "audios_playlist"
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
cat(glue("Pasta criada: {output_folder}\n"))
}
# Baixar os áudios
baixar_audios(yt_dlp, video_url, output_folder)
cat("Processo concluído. Os áudios foram salvos em:", output_folder, "\n")
library(tidyverse)
library(fs)
library(magrittr)
# Definir o diretório onde os arquivos estão armazenados
audio_dir <- "C:/Users/tenorioabs/OneDrive/ciencia_de_dados/R/youtube_extrai_mp3/audios_playlist"
# Definir o tamanho máximo dos arquivos de saída (150 MB em bytes)
max_size <- 150 * 1024 * 1024
# Listar todos os arquivos na pasta (assumindo que são .mp3)
audio_files <- dir_ls(audio_dir, regexp = "\\.mp3$") %>%
file_info() %>%
arrange(path)  # Ordena os arquivos corretamente
# Criar a pasta de saída se não existir
output_dir <- file.path(audio_dir, "arquivos_combinados")
dir_create(output_dir)
# Função para obter o tamanho do arquivo
file_size_bytes <- function(file) {
file.info(file)$size
}
# Criar lotes de arquivos combinados respeitando o limite de 150 MB
current_batch <- c()  # Alterado para vetor de caracteres
current_size <- 0
batch_index <- 1
for (file in audio_files$path) {
file_size <- file_size_bytes(file)
if (current_size + file_size > max_size) {
# Criar o arquivo combinado usando FFmpeg
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
# Criar arquivo temporário com a lista de arquivos
writeLines(current_batch, "temp_list.txt")
# Executar FFmpeg para juntar os arquivos
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
# Resetar para o próximo lote
batch_index <- batch_index + 1
current_batch <- c()  # Reinicia o vetor de caracteres
current_size <- 0
}
# Adicionar o arquivo ao lote
current_batch <- c(current_batch, sprintf("file '%s'", file))
current_size <- current_size + file_size
}
# Criar o último lote caso existam arquivos restantes
if (length(current_batch) > 0) {
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
writeLines(current_batch, "temp_list.txt")
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
}
# Remover arquivo temporário
file_delete("temp_list.txt")
cat("Processo concluído! Arquivos combinados foram salvos em:", output_dir, "\n")
library(tidyverse)
library(fs)
library(magrittr)
# Definir o diretório onde os arquivos estão armazenados
audio_dir <- "C:/Users/tenorioabs/OneDrive/ciencia_de_dados/R/youtube_extrai_mp3/audios_playlist"
# Definir o tamanho máximo dos arquivos de saída (150 MB em bytes)
max_size <- 60 * 1024 * 1024
# Listar todos os arquivos na pasta (assumindo que são .mp3)
audio_files <- dir_ls(audio_dir, regexp = "\\.mp3$") %>%
file_info() %>%
arrange(path)  # Ordena os arquivos corretamente
# Criar a pasta de saída se não existir
output_dir <- file.path(audio_dir, "arquivos_combinados")
dir_create(output_dir)
# Função para obter o tamanho do arquivo
file_size_bytes <- function(file) {
file.info(file)$size
}
# Criar lotes de arquivos combinados respeitando o limite de 150 MB
current_batch <- c()  # Alterado para vetor de caracteres
current_size <- 0
batch_index <- 1
for (file in audio_files$path) {
file_size <- file_size_bytes(file)
if (current_size + file_size > max_size) {
# Criar o arquivo combinado usando FFmpeg
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
# Criar arquivo temporário com a lista de arquivos
writeLines(current_batch, "temp_list.txt")
# Executar FFmpeg para juntar os arquivos
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
# Resetar para o próximo lote
batch_index <- batch_index + 1
current_batch <- c()  # Reinicia o vetor de caracteres
current_size <- 0
}
# Adicionar o arquivo ao lote
current_batch <- c(current_batch, sprintf("file '%s'", file))
current_size <- current_size + file_size
}
# Criar o último lote caso existam arquivos restantes
if (length(current_batch) > 0) {
batch_file <- file.path(output_dir, paste0("audio_combined_", batch_index, ".mp3"))
writeLines(current_batch, "temp_list.txt")
system(sprintf('ffmpeg -f concat -safe 0 -i temp_list.txt -c copy "%s"', batch_file), intern = TRUE)
}
# Remover arquivo temporário
file_delete("temp_list.txt")
cat("Processo concluído! Arquivos combinados foram salvos em:", output_dir, "\n")
